1-3 Introduction:
	✔ 1 helpful resources @done (6/5/2017, 8:44:08 AM)
	✔ 2 why choose go @done (6/5/2017, 8:44:18 AM)
	✔ 3 hello world @done (6/5/2017, 8:44:26 AM)
4-16 Installing Go:
	✔ 4 intro installing go @done (6/5/2017, 8:45:26 AM)
	✔ 5 git hub git bash terminal @done (6/5/2017, 8:46:01 AM)
	✔ 6 go install insights @done (6/5/2017, 8:46:17 AM)
	✔ 7 workspace namespacing @done (6/5/2017, 8:46:43 AM)
	✔ 8 env variables @done (6/5/2017, 8:46:50 AM)
	✔ 9 windows env variables @done (6/5/2017, 8:47:03 AM)
	✘ 10 mac env variables @cancelled (6/5/2017, 8:47:31 AM)
	✔ 11 important to read @done (6/5/2017, 8:48:03 AM)
	✔ 12 linux machine setup @done (6/5/2017, 8:48:19 AM)
	✔ 13 linux machine configuration @done (6/5/2017, 8:48:33 AM)
	✔ 14 Go linux @done (6/5/2017, 8:48:43 AM)
	✔ 15 test env variables @done (6/5/2017, 8:49:05 AM)
	✔ 16 review @done (6/5/2017, 8:49:12 AM)
17-26 Develoment Environment:
	✔ 17 peview @done (6/5/2017, 8:49:41 AM)
	✔ 18 Go un ; go build ; go install @done (6/5/2017, 8:49:57 AM)
	✔ 19 IDE webstorm @done (6/5/2017, 8:50:31 AM)
	✔ 19 IDE webstorm atom continued @done (6/5/2017, 8:50:49 AM)
	✔ 20 free for students webstorm @done (6/5/2017, 8:52:09 AM)
	✔ 21 creating your first project @done (6/5/2017, 8:52:19 AM)
	✔ 22 writing your first program AWESOME @done (6/5/2017, 8:52:30 AM)
	✔ 24 github explained @done (6/5/2017, 8:52:38 AM)
	✔ 25 getting started with github @done (6/5/2017, 8:52:53 AM)
	✔ 26 review @done (6/5/2017, 8:52:58 AM)
27-37 Computer Fundamentals:
	✔ 27 preview how computers work @done (6/5/2017, 9:22:49 AM)
	✔ 28.1 how computers work @done (6/5/2017, 9:42:30 AM)
			// his youtube
	✔ 28.2 how computers work @done (6/5/2017, 9:47:30 AM)
	✔ 30 house keeping go get update @done (6/5/2017, 10:13:45 AM)
	✔ 31 numeral systems overview @done (6/5/2017, 10:27:22 AM)
	✔ 32 binary numbering system @done (6/5/2017, 10:27:27 AM)
	✔ 33 hexadecimal numbering system @done (6/5/2017, 10:28:56 AM)
	✔ 34 ASCII UTF8 @done (6/5/2017, 10:38:43 AM)
	✔ 35 format printing dec binary hexadecimal @done (6/5/2017, 10:59:33 AM)
	✔ 36 UTF8 loops first look @done (6/5/2017, 11:31:06 AM)
	✔ 37 review @done (6/5/2017, 11:35:31 AM)
38-54 Language Fundamentals:
	✔ 38 preview language fundamentals @done (6/6/2017, 8:24:28 AM)
				// https://www.ardanlabs.com/hardcore-go 
	✔ 39 packages @done (6/6/2017, 9:13:08 AM)
	✔ 40 go run ; build ; install ; clean @done (6/6/2017, 9:23:32 AM)
	✔ 41 variables @done (6/6/2017, 9:54:54 AM)
	✔ 42 scope package block level @done (6/6/2017, 10:09:05 AM)
				// https://www.golang-book.com/books/web/01-02#scope
	✔ 43 scope example visibility in packages @done (6/6/2017, 10:58:39 AM)
	✔ 44 closure @done (6/6/2017, 11:35:58 AM)
	✔ 45 language spec scope @done (6/6/2017, 11:49:04 AM)
				// get the online spec (offi doc) + golang-book.com
	✔ 46 blank identifer @done (6/6/2017, 12:07:00 PM)
	✔ 47 constantsiotas @done (6/6/2017, 7:45:29 PM)
	✔ 48 constantsuntyped @done (6/7/2017, 8:29:30 AM)
				// https://blog.golang.org/constants/
	✔ 49 words of encouragement @done (6/7/2017, 8:30:41 AM)
	✔ 50 memory and memory address @done (6/7/2017, 8:46:04 AM)
				// https://goo.gl/PHKgO7 then click on "MEMORY IN COMPUTERS VIDEO"
	✔ 51 pointers @done (6/7/2017, 9:06:51 AM)
	✔ 52 using pointers @done (6/7/2017, 9:37:52 AM)
	✔ 53 remainder @done (6/7/2017, 9:45:11 AM)
	✔ 54 review @done (6/7/2017, 9:45:12 AM)
55-65 Control Flow:
	✔ 55 preview control Flow @done (6/7/2017, 10:45:59 AM)
	✔ 56 init cond post @done (6/7/2017, 11:50:54 AM)
				// https://forum.golangbridge.org/
				// effective go
	✔ 57 nested loops @done (6/8/2017, 9:44:02 AM)
	✔ 58 condition no condition break continue @done (6/8/2017, 4:30:08 PM)
	✔ 59 runes @done (6/8/2017, 5:07:16 PM)
	✔ 60 loop showing UTF8 runes @done (6/8/2017, 5:24:14 PM)
	✔ 61 strings made up of runes @done (6/8/2017, 6:12:07 PM)
	✔ 62 switch case default @done (6/8/2017, 6:43:21 PM)
	✔ 63 if statements @done (6/9/2017, 9:50:20 AM)
	✔ 64 exercise solutions @done (6/9/2017, 10:57:44 AM)
	✔ 65 review control flow @done (6/9/2017, 11:01:18 AM)
66-84 Functions:
	✔ 66 preview functions @done (6/12/2017, 9:39:27 AM)
	✔ 67 main params args purpose of functions @done (6/12/2017, 9:52:18 AM)
	✔ 68 returns @done (6/12/2017, 10:05:58 AM)
	✔ 69 variadic parameters @done (6/14/2017, 9:53:58 AM)
	✔ 70 veriadic args @done (6/14/2017, 10:07:05 AM)
	✔ 71 func expression @done (6/14/2017, 10:19:09 AM)
	✔ 72 closure @done (6/14/2017, 10:50:56 AM)
	✔ 73 callbacks @done (6/14/2017, 11:40:59 AM)
	✔ 74 callback example @done (6/14/2017, 11:40:59 AM)
	✔ 75 recursion @done (6/14/2017, 12:17:06 PM)
	✔ 76 defer @done (6/14/2017, 12:34:12 PM)
	✔ 77 passby value @done (6/14/2017, 1:03:37 PM)
	✔ 78 reference types @done (6/14/2017, 3:35:51 PM)
	✔ 79 anonym self executing func @done (6/14/2017, 3:42:25 PM)
	✔ 80 bool expressions @done (6/14/2017, 4:59:39 PM)
	✔ 81 exercises part1 @done (6/15/2017, 9:25:52 AM)
	✔ 82 exercises part2 @done (6/15/2017, 10:40:02 AM)
	✔ 83 exercises part3 @done (6/15/2017, 10:40:03 AM)
	✔ 84 review @done (6/15/2017, 12:07:32 PM)
			// DRY : Don't Repeat Yourself
85-87 Data Structures - Array:
	✔ 85 preview data structures @done (6/15/2017, 12:19:21 PM)
	✔ 86 arrays @done (6/15/2017, 12:34:53 PM)
	✔ 87 array examples @done (6/15/2017, 12:54:13 PM)
88-93 Data Structures - Slice:
	☐ 88 slices intro
	☐ 89 slices examples
	☐ 90 slices multidimentional
	☐ 91 slice creation short hand var make
	☐ 92 slices incrementing a value
	☐ 93 review slices
94-105 Data Structures - Map:
	☐ 94 map intro reference types
	☐ 95 part01 map examples
	☐ 96 part02 map examples
	☐ 97 part03 map examples
	☐ 98 map documentation
	☐ 99 map range loop
	☐ 100 github pull
	☐ 101 hash tables explained
	☐ 102 all english words awesome preview
	☐ 103 hashing words
	☐ 104 building our hash functions
	☐ 105 finished hash algorithm
106-113 Data Structures - Struct:
	☐ 106 struct intro oop example
	☐ 107 struct docs oop
	☐ 108 go language for talking about structs
	☐ 109 methods embedded types pointers
	☐ 110 json intro marshalling
	☐ 111 json unmarshall
	☐ 112 a json encoded code
	☐ 113 b json encoded code
114-125 Interfaces:
	☐ 114 interfaces intro
	☐ 115 interface example
	☐ 116 interface examples power of interfaces read all new scanner
	☐ 117 kennedy interfaces
	☐ 118 donovan interfaces
	☐ 119 package sort exercise
	☐ 120 sort interfaces string slice
	☐ 121 sort strings reverse
	☐ 122 sorting ints
	☐ 123 empty interface
	☐ 124 method set revisited
	☐ 125 conversion vs assertion
